%!PS-Adobe-3.0 EPSF-3.0
%%Creator: xpdf/pdftops 3.00
%%LanguageLevel: 2
%%BoundingBox: 0 0 312 177
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add axialCol sc
    exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
    0 360 arc h
    dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
    0 360 arc h f*
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
q
0 w
q
0 -0.2 311.9 177.2 re
W*
/DeviceRGB {} cs
[0.799988 0.799988 0.799988] sc
14.2 106.1 m
85 106.1 106.3 162.8 184.3 162.8 c
184.3 162.8 184.3 162.8 191.3 134.5 c
113.4 134.5 92.1 77.8 21.3 77.8 c
21.3 77.8 21.3 77.8 14.2 106.1 c
h
f*
/DeviceRGB {} CS
[0 0 0] SC
q
0.849 w
0 J
1 j
14.2 106.1 m
85 106.1 106.3 162.8 184.3 162.8 c
184.3 162.8 184.3 162.8 191.3 134.5 c
113.4 134.5 92.1 77.8 21.3 77.8 c
21.3 77.8 21.3 77.8 14.2 106.1 c
h
S
Q
/DeviceRGB {} cs
[0.70195 0.70195 0.70195] sc
21.3 77.8 m
85 77.8 113.4 134.5 191.3 134.5 c
191.3 134.5 191.3 134.5 290.6 70.7 c
212.6 70.7 191.3 14 120.5 14 c
120.5 14 120.5 14 21.3 77.8 c
h
f*
/DeviceRGB {} CS
[0 0 0] SC
q
0.849 w
0 J
1 j
21.3 77.8 m
85 77.8 113.4 134.5 191.3 134.5 c
191.3 134.5 191.3 134.5 290.6 70.7 c
212.6 70.7 191.3 14 120.5 14 c
120.5 14 120.5 14 21.3 77.8 c
h
S
Q
/DeviceRGB {} cs
[0.599991 0.599991 0.599991] sc
127.6 42.4 m
198.4 42.4 219.7 99 297.6 99 c
297.6 99 297.6 99 290.6 70.7 c
219.7 70.7 191.3 14 120.5 14 c
120.5 14 120.5 14 127.6 42.4 c
h
f*
/DeviceRGB {} CS
[0 0 0] SC
q
0.849 w
0 J
1 j
127.6 42.4 m
198.4 42.4 219.7 99 297.6 99 c
297.6 99 297.6 99 290.6 70.7 c
219.7 70.7 191.3 14 120.5 14 c
120.5 14 120.5 14 127.6 42.4 c
h
S
Q
/DeviceRGB {} cs
[0 0 0] sc
77 36.4 m
88.4 49.6 l
94.1 40.2 l
77 36.4 l
h
f*
148.3 78.2 m
88.9 42.5 l
88 43.9 l
147.5 79.6 l
148.3 78.2 l
h
f*
127.6 155.7 m
137.1 141.1 l
126.5 138.3 l
127.6 155.7 l
h
f*
147.1 78.7 m
130.1 142.7 l
131.8 143.1 l
148.7 79.1 l
147.1 78.7 l
h
f*
211.7 36.4 m
194.8 41 l
200.9 50.2 l
211.7 36.4 l
h
f*
148.4 79.6 m
201.1 44.5 l
200.2 43 l
147.4 78.2 l
148.4 79.6 l
h
f*
63.8 49.9 m
76.5 50.5 l
76.5 50.1 l
76.5 49.6 l
63.8 49 l
63.8 49.4 l
63.8 49.9 l
h
f*
76.5 50.1 m
76.6 49.7 l
76.5 49.6 l
76.5 50.1 l
h
f*
76.5 50.5 m
78.1 50.7 l
78.2 50.3 l
78.2 49.9 l
76.6 49.7 l
76.5 50.1 l
76.5 50.5 l
h
f*
92.2 53.3 m
99 55.1 l
99.1 54.7 l
99.2 54.3 l
92.4 52.5 l
92.3 52.9 l
92.2 53.3 l
h
f*
99.1 54.7 m
99.2 54.3 l
99.2 54.3 l
99.1 54.7 l
h
f*
99 55.1 m
105.9 57.5 l
106 57.2 l
106.2 56.8 l
99.2 54.3 l
99.1 54.7 l
99 55.1 l
h
f*
119.1 63.2 m
128 67.8 l
128.2 67.4 l
128.4 67 l
119.5 62.4 l
119.3 62.8 l
119.1 63.2 l
h
f*
128.2 67.4 m
128.4 67 l
128.4 67 l
128.2 67.4 l
h
f*
128 67.8 m
131.8 69.9 l
132 69.6 l
132.2 69.2 l
128.4 67 l
128.2 67.4 l
128 67.8 l
h
f*
144.2 77.2 m
146 78.2 l
146.2 77.8 l
146.4 77.4 l
144.7 76.4 l
144.5 76.8 l
144.2 77.2 l
h
f*
146.2 77.8 m
146 78.2 l
146 78.2 l
146.2 77.8 l
h
f*
146 78.2 m
156.7 84.3 l
157 83.9 l
157.2 83.5 l
146.4 77.4 l
146.2 77.8 l
146 78.2 l
h
f*
169.4 91.1 m
174 93.4 l
174.1 93 l
174.3 92.6 l
169.8 90.4 l
169.6 90.7 l
169.4 91.1 l
h
f*
174.1 93 m
174 93.4 l
174 93.4 l
174.1 93 l
h
f*
174 93.4 m
182.6 97 l
182.8 96.6 l
182.9 96.2 l
174.3 92.6 l
174.1 93 l
174 93.4 l
h
f*
196.3 101.6 m
207 104.1 l
207.1 103.7 l
207.2 103.3 l
196.5 100.7 l
196.4 101.2 l
196.3 101.6 l
h
f*
207.1 103.7 m
207 104.1 l
207 104.1 l
207.1 103.7 l
h
f*
207 104.1 m
210.4 104.6 l
210.5 104.2 l
210.6 103.8 l
207.1 103.3 l
207.1 103.7 l
207 104.1 l
h
f*
224.8 106.1 m
233.8 106.6 l
233.9 105.7 l
224.8 105.3 l
224.8 106.1 l
h
f*
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
